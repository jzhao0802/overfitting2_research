rm(list=ls())
library("snowfall")
sfLibrary("snow",character.only = TRUE)
sfLibrary("MASS", character.only = TRUE)
sfLibrary("snowfall", character.only = TRUE)
sfLibrary("plyr",character.only = TRUE)
#sfSource("D:/RareDisease_TSC/source/PreProcess/SampAndRes.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/NormAge.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/MkDictEnvt.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/PrsTst.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/MkFtVec.R")
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/SampAndRes_forParOnSimu.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/NormAge.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/MkDictEnvt.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/PrsTst_forTest.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/MkFtVec.R')
#using Huma's input file
inFile1TSC <- "C:\\work\\working materials\\TSC and QC project\\data\\TSCAgeGender_May06.txt"
inFile2TSC <- "C:\\work\\working materials\\TSC and QC project\\data\\TSCCodeDrug_May13.txt"
inFile1NonTSC <- "C:\\work\\working materials\\TSC and QC project\\data\\NonTSCAgeGender_huma.txt"
inFile2NonTSC <- "C:\\work\\working materials\\TSC and QC project\\data\\NonTSCCodeDrug_huma.txt"
#inFile1TSC <- "D:/RareDisease_TSC/Data/TobeFV/TSCAgeGender.txt"
#inFile2TSC <- "D:/RareDisease_TSC/Data/TobeFV/TSCCodeDrug.txt"
#inFile1NonTSC <- "D:/RareDisease_TSC/Data/TobeFV/NonTSCAgeGender_2.txt"
#inFile2NonTSC <- "D:/RareDisease_TSC/Data/TobeFV/NonTSCCodeDrug_2.txt"
dictFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/CodesDrugsDict"
TSCTsIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TSCTestIndices"
TSCTrIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TSCTrIndices"
TSCVlIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TSCVlIndices"
TsIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TestIndices"
TrIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TrIndices"
VlIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/VlIndices"
TrFile1 <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/trainv"
VlFile <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/valid"
TrFile <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/train"
TsFilePos <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/testpos"
TsFileNeg <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/testneg"
TimeLog <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n"
Ext <- ".csv"
NumSimulation <- 1
PERC <- 0.1
ONE <- FALSE
constNumVlPtNonTSC <- 20000
norm2 <- TRUE
#SeedV <- c(1000000,9000000,18000000,27000000,36000000,45000000,54000000,63000000,72000000,81000000) # For first (SAS) sample
SeedV <- c(173514,8912020,64276204,84048,9863684,480,4033848,874190486,1334165,1565796911) # For second (SAS) sample
##################################################################################################
#                           Read raw TSC & Non-TSC data files                                    #
##################################################################################################
tm <- proc.time()
cat("\n Reading and age and gender for TSC and non-TSC patients\n")
# Read age and gender for TSC patients
TSCAgeGender <- read.table(inFile1TSC,sep="\t",comment.char="")
TSCAgeGender <- cbind(TSCAgeGender, rep(0, nrow(TSCAgeGender)))   #[334, 6]
colnames(TSCAgeGender) <- c("Id","FirstAge", "LastAge", "Male","Female","NE")
# Read age and gender for non-TSC patients
NonTSCAgeGender <- read.table(inFile1NonTSC,sep="\t",comment.char="") #[100000, 6]
colnames(NonTSCAgeGender) <- c("Id","FirstAge", "LastAge", "Male","Female","NE")
cat("\n Reading ICD, READ, OPCS codes and drugs for TSC and non-TSC patients\n")
# Read codes and drugs for TSC patients
TSCCodeDrug <- read.table(inFile2TSC,sep="\t",comment.char="",colClasses="character")  #[1] 334 365
# Read codes and drugs for non-TSC patiemts
NonTSCCodeDrug <- read.table(inFile2NonTSC,sep="\t",comment.char="",colClasses="character")  #[1] 100000    638
cat("Reading data time: ", proc.time()- tm,"\n")   #42s
##################################################################################################
#                     Preprocess data in parallel or sequential mode
#                     Modified by Jie
##################################################################################################
num_pros <- Sys.getenv('NUMBER_OF_PROCESSORS')
sfInit(parallel=TRUE, cpus=num_pros, type="SOCK",slaveOutfile = "C:\\work\\working materials\\TSC and QC project\\data/parOnSimu.log")
sfLibrary(snowfall)
timeStart <- proc.time()
sfExport("TSCAgeGender","TSCCodeDrug","NonTSCAgeGender","NonTSCCodeDrug","SeedV","constNumVlPtNonTSC","norm2", "ONE")
sfExport("dictFile","TrFile1","VlFile","TrFile","PERC","TrIndexFile","VlIndexFile","TsIndexFile","TSCTrIndexFile","TSCVlIndexFile","TSCTsIndexFile", 'TsFilePos', 'TsFileNeg', "Ext")
sfExport("SampAndRes","NormAge","MkDictEnv","MkFtVec","PrsTst")
sfExport("ldply", namespace = "plyr")
sfExport("quickdf", namespace = "plyr")
cat('time used for sfExport: ', proc.time()-timeStart, '\n')
cat(file=paste(TimeLog, '/timeLogComp', Ext, sep=''),append=TRUE,'main_v3:oneClass=', ONE, 'time used for sfExport: ', proc.time()-timeStart, 'and the time is ', format(Sys.time(), "%a %b %d %X %Y"), '\n')
#for (counter in 1:NumSimulation) {
# tm <- proc.time()
#SampAndRes(counter)
#cat("Simulation ", counter, " time: ", proc.time()- tm,"\n")
#}
##modified by jzhao#######
runBySimu <- function(counter){
tm <- proc.time()
SampAndRes(counter)
cat("Simulation ", counter, " time: ", proc.time()- tm,"\n")
}
timeStart <- proc.time()
result <- sfClusterApplyLB( 1:10, runBySimu)
timeEnd <- proc.time()
timeUsed <- timeEnd-timeStart
cat(file=paste(TimeLog, '/timeLogComp', Ext, sep=''),append=TRUE,'main_v3:oneClass=', ONE, ' time used for simulation parallel: ', timeUsed, 'and the time is ', format(Sys.time(), "%a %b %d %X %Y"), '\n')
sfStop()
rm(list=ls())
library("snowfall")
sfLibrary("snow",character.only = TRUE)
sfLibrary("MASS", character.only = TRUE)
sfLibrary("snowfall", character.only = TRUE)
sfLibrary("plyr",character.only = TRUE)
#sfSource("D:/RareDisease_TSC/source/PreProcess/SampAndRes.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/NormAge.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/MkDictEnvt.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/PrsTst.R")
#sfSource("D:/RareDisease_TSC/source/PreProcess/MkFtVec.R")
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/SampAndRes_forParOnSimu.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/NormAge.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/MkDictEnvt.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/PrsTst_forTest.R')
sfSource('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/MkFtVec.R')
#using Huma's input file
inFile1TSC <- "C:\\work\\working materials\\TSC and QC project\\data\\TobeFV_FV_2_update\\TSCAgeGender_May06.txt"
inFile2TSC <- "C:\\work\\working materials\\TSC and QC project\\data\\TobeFV_FV_2_update\\TSCCodeDrug_May13.txt"
inFile1NonTSC <- "C:\\work\\working materials\\TSC and QC project\\data\\TobeFV_FV_2_update\\NonTSCAgeGender_huma.txt"
inFile2NonTSC <- "C:\\work\\working materials\\TSC and QC project\\data\\TobeFV_FV_2_update\\NonTSCCodeDrug_huma.txt"
#inFile1TSC <- "D:/RareDisease_TSC/Data/TobeFV/TSCAgeGender.txt"
#inFile2TSC <- "D:/RareDisease_TSC/Data/TobeFV/TSCCodeDrug.txt"
#inFile1NonTSC <- "D:/RareDisease_TSC/Data/TobeFV/NonTSCAgeGender_2.txt"
#inFile2NonTSC <- "D:/RareDisease_TSC/Data/TobeFV/NonTSCCodeDrug_2.txt"
dictFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/CodesDrugsDict"
TSCTsIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TSCTestIndices"
TSCTrIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TSCTrIndices"
TSCVlIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TSCVlIndices"
TsIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TestIndices"
TrIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/TrIndices"
VlIndexFile <- "C:\\work\\working materials\\TSC and QC project\\data/Dict_Ind_2_update/2n/VlIndices"
TrFile1 <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/trainv"
VlFile <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/valid"
TrFile <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/train"
TsFilePos <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/testpos"
TsFileNeg <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/testneg"
TimeLog <- "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n"
Ext <- ".csv"
NumSimulation <- 1
PERC <- 0.1
ONE <- FALSE
constNumVlPtNonTSC <- 20000
norm2 <- TRUE
#SeedV <- c(1000000,9000000,18000000,27000000,36000000,45000000,54000000,63000000,72000000,81000000) # For first (SAS) sample
SeedV <- c(173514,8912020,64276204,84048,9863684,480,4033848,874190486,1334165,1565796911) # For second (SAS) sample
##################################################################################################
#                           Read raw TSC & Non-TSC data files                                    #
##################################################################################################
tm <- proc.time()
cat("\n Reading and age and gender for TSC and non-TSC patients\n")
# Read age and gender for TSC patients
TSCAgeGender <- read.table(inFile1TSC,sep="\t",comment.char="")
TSCAgeGender <- cbind(TSCAgeGender, rep(0, nrow(TSCAgeGender)))   #[334, 6]
colnames(TSCAgeGender) <- c("Id","FirstAge", "LastAge", "Male","Female","NE")
# Read age and gender for non-TSC patients
NonTSCAgeGender <- read.table(inFile1NonTSC,sep="\t",comment.char="") #[100000, 6]
colnames(NonTSCAgeGender) <- c("Id","FirstAge", "LastAge", "Male","Female","NE")
cat("\n Reading ICD, READ, OPCS codes and drugs for TSC and non-TSC patients\n")
# Read codes and drugs for TSC patients
TSCCodeDrug <- read.table(inFile2TSC,sep="\t",comment.char="",colClasses="character")  #[1] 334 365
# Read codes and drugs for non-TSC patiemts
NonTSCCodeDrug <- read.table(inFile2NonTSC,sep="\t",comment.char="",colClasses="character")  #[1] 100000    638
cat("Reading data time: ", proc.time()- tm,"\n")   #42s
num_pros <- Sys.getenv('NUMBER_OF_PROCESSORS')
sfInit(parallel=TRUE, cpus=num_pros, type="SOCK",slaveOutfile = "C:\\work\\working materials\\TSC and QC project\\data/parOnSimu.log")
sfLibrary(snowfall)
timeStart <- proc.time()
sfExport("TSCAgeGender","TSCCodeDrug","NonTSCAgeGender","NonTSCCodeDrug","SeedV","constNumVlPtNonTSC","norm2", "ONE")
sfExport("dictFile","TrFile1","VlFile","TrFile","PERC","TrIndexFile","VlIndexFile","TsIndexFile","TSCTrIndexFile","TSCVlIndexFile","TSCTsIndexFile", 'TsFilePos', 'TsFileNeg', "Ext")
sfExport("SampAndRes","NormAge","MkDictEnv","MkFtVec","PrsTst")
sfExport("ldply", namespace = "plyr")
sfExport("quickdf", namespace = "plyr")
cat('time used for sfExport: ', proc.time()-timeStart, '\n')
cat(file=paste(TimeLog, '/timeLogComp', Ext, sep=''),append=TRUE,'main_v3:oneClass=', ONE, 'time used for sfExport: ', proc.time()-timeStart, 'and the time is ', format(Sys.time(), "%a %b %d %X %Y"), '\n')
runBySimu <- function(counter){
tm <- proc.time()
SampAndRes(counter)
cat("Simulation ", counter, " time: ", proc.time()- tm,"\n")
}
timeStart <- proc.time()
result <- sfClusterApplyLB( 1:2, runBySimu)
timeEnd <- proc.time()
timeUsed <- timeEnd-timeStart
cat(file=paste(TimeLog, '/timeLogComp', Ext, sep=''),append=TRUE,'main_v3:oneClass=', ONE, ' time used for simulation parallel: ', timeUsed, 'and the time is ', format(Sys.time(), "%a %b %d %X %Y"), '\n')
sfStop()
counter <- 1
loop <- 1
filenum <- loop
TrIndexFile <- paste(TrIndexFile,filenum,Ext,sep="")
VlIndexFile <- paste(VlIndexFile,filenum,Ext,sep="")
TSCTrIndexFile <- paste(TSCTrIndexFile,filenum,Ext,sep="")
TSCVlIndexFile <- paste(TSCVlIndexFile,filenum,Ext,sep="")
TSCTsIndexFile <- paste(TSCTsIndexFile,filenum,Ext,sep="")
PtIdTSC <- TSCAgeGender$Id
NumPtTSC <- length(PtIdTSC)
TrPerc <- 0.7
NumTrPtTSC <- round(TrPerc * NumPtTSC)
NumOtPtTSC <- NumPtTSC - NumTrPtTSC
VLTSPerc <- 0.5
NumVlPtTSC <- round(NumOtPtTSC * VLTSPerc)
NumTsPtTSC <- NumOtPtTSC - NumVlPtTSC
set.seed(SeedV[filenum])
Index <- sample(1:NumPtTSC)
set.seed(SeedV[filenum])
TrTSCIndex <- sample(Index,NumTrPtTSC)
OtTSCIndex <- setdiff(Index,TrTSCIndex)
set.seed(SeedV[filenum])
VlTSCIndex <- sample(OtTSCIndex,NumVlPtTSC)
TsTSCIndex <- setdiff(OtTSCIndex,VlTSCIndex)
TrTSCPtId <- PtIdTSC[TrTSCIndex] #234
VlTSCPtId <- PtIdTSC[VlTSCIndex] #50
TsTSCPtId <- PtIdTSC[TsTSCIndex] #50
TrVlTSCPtId <- c(TrTSCPtId,VlTSCPtId) #284
write.table(TrTSCPtId,file=TSCTrIndexFile,quote=FALSE,col.names=FALSE,row.names=FALSE,append=TRUE)
write.table(VlTSCPtId,file=TSCVlIndexFile,quote=FALSE,col.names=FALSE,row.names=FALSE,append=TRUE)
rm(PtIdTSC)
##################################################################################################
#                                                                                                #
#                                        non-TSC                                                 #
#                                                                                                #
##################################################################################################
PtIdNonTSC <- NonTSCAgeGender$Id
NumPtNonTSC <- length(PtIdNonTSC) #99999
NumTrPtNonTSC <- round(PERC * NumPtNonTSC) #10000
NumOtPtNonTSC <- NumPtNonTSC - NumTrPtNonTSC
NumVlPtNonTSC <- constNumVlPtNonTSC    #20000
NumTsPtNonTSC <- NumOtPtNonTSC - NumVlPtNonTSC   #69999
if (NumTrPtNonTSC > 0){
set.seed(SeedV[filenum])
Index <- sample(1:NumPtNonTSC)
set.seed(SeedV[filenum])
TrNonTSCIndex <- sample(Index,NumTrPtNonTSC)
OtIndex <- setdiff(Index,TrNonTSCIndex)
TrNonTSCIndex <- sort(TrNonTSCIndex)
}
if (NumTrPtNonTSC == 0){
OtIndex <- sample(1:NumPtNonTSC)
}
set.seed(SeedV[filenum])
VlNonTSCIndex <- sample(OtIndex,NumVlPtNonTSC)
TsNonTSCIndex <- setdiff(OtIndex,VlNonTSCIndex)
VlNonTSCIndex <- sort(VlNonTSCIndex)
TsNonTSCIndex <- sort(TsNonTSCIndex)
if (NumTrPtNonTSC > 0){
TrNonTSCPtId <- PtIdNonTSC[TrNonTSCIndex]  # 10000
write.table(TrNonTSCPtId,file=TrIndexFile,quote=FALSE,col.names=FALSE,row.names=FALSE,append=TRUE)
}
VlNonTSCPtId <- PtIdNonTSC[VlNonTSCIndex]  #20000
TsNonTSCPtId <- PtIdNonTSC[TsNonTSCIndex]  #70000
write.table(VlNonTSCPtId,file=VlIndexFile,quote=FALSE,col.names=FALSE,row.names=FALSE,append=TRUE)
rm(PtIdNonTSC)
cat("\n Processing patients for training\n")
TrTSCAgeGender <- lapply(X=1:1:length(TrTSCPtId), function(X) TSCAgeGender[ which(TSCAgeGender$Id %in% TrTSCPtId[X]), ] )
TrTSCCodeDrug <- lapply(X=1:1:length(TrTSCPtId), function(X) TSCCodeDrug[ which(TSCCodeDrug$V1 %in% TrTSCPtId[X]), ] )
if (NumTrPtNonTSC > 0 & !ONE){
cat("\n Processing non-TSC training patients\n")
TrNonTSCAgeGender <- lapply(X=1:1:length(TrNonTSCPtId), function(X) NonTSCAgeGender[ which(NonTSCAgeGender$Id %in% TrNonTSCPtId[X]), ] )
TrNonTSCCodeDrug <- lapply(X=1:1:length(TrNonTSCPtId), function(X) NonTSCCodeDrug[ which(NonTSCCodeDrug$V1 %in% TrNonTSCPtId[X]), ] )
TrPtsAgeGender <- c(TrTSCAgeGender,TrNonTSCAgeGender)   #10234=234+10000
rm(list=c('TrNonTSCAgeGender','TrTSCAgeGender'))
TrPtsCodeDrug <- c(TrTSCCodeDrug,TrNonTSCCodeDrug)
rm(list=c('TrNonTSCCodeDrug','TrTSCCodeDrug'))
}
if (ONE) {
TrPtsAgeGender <- TrTSCAgeGender
rm(list=c('TrTSCAgeGender'))
TrPtsCodeDrug <- TrTSCCodeDrug
rm(list=c('TrTSCCodeDrug'))
}
source('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/NormAge.R')
source('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/MkDictEnvt.R')
source('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/PrsTst_forTest.R')
source('C:\\work\\working materials\\TSC and QC project\\code\\PreProcess/MkFtVec.R')
TrPtsAgeGender <- ldply(TrPtsAgeGender,quickdf)
MeanAgeFirst <- mean(TrPtsAgeGender[,2])
MeanAgeSecond <- mean(TrPtsAgeGender[,3])
TrAgeMat <- NormAge(TrPtsAgeGender,MeanAgeFirst,MeanAgeSecond)
dictFile_ <- paste(dictFile,"_forValidation",filenum,Ext,sep="")
Dict <- MkDictEnv(TrPtsCodeDrug,dictFile_)   #TrPtsCodeDrug  list[[334]] data.frame[1, 365]
# Feature vectors for patients in training set
TrTSClabel <- rep(1,NumTrPtTSC) # Label (response) vector for TSC patients
if (!ONE) {
TrNonTSClabel <- rep(-1,NumTrPtNonTSC) # Label (response) vector for non-TSC patients
Trlabel <- c(TrTSClabel,TrNonTSClabel)
}else{ Trlabel <- TrTSClabel}
Fname <- paste(TrFile1,filenum,'.txt',sep="")
MkFtVec(TrAgeMat,TrPtsCodeDrug,Dict,Trlabel,Fname)
rm(list=c('TrAgeMat','TrPtsCodeDrug','Trlabel'))
cat("\n Processing patients for validation\n")
VlTSCAgeGender <- lapply(X=1:1:length(VlTSCPtId), function(X) TSCAgeGender[ which(TSCAgeGender$Id %in% VlTSCPtId[X]), ] )
VlTSCCodeDrug <- lapply(X=1:1:length(VlTSCPtId), function(X) TSCCodeDrug[ which(TSCCodeDrug$V1 %in% VlTSCPtId[X]), ] )
VlNonTSCAgeGender <- lapply(X=1:1:length(VlNonTSCPtId), function(X) NonTSCAgeGender[ which(NonTSCAgeGender$Id %in% VlNonTSCPtId[X]), ] )
VlNonTSCCodeDrug <- lapply(X=1:1:length(VlNonTSCPtId), function(X) NonTSCCodeDrug[ which(NonTSCCodeDrug$V1 %in% VlNonTSCPtId[X]), ] )
VlPtsCodeDrug <- c(VlTSCCodeDrug,VlNonTSCCodeDrug)
rm(list=c('VlNonTSCCodeDrug','VlTSCCodeDrug'))
##################################################################################################
# Age normalisation for validation set
VlPtsAgeGender <- c(VlTSCAgeGender,VlNonTSCAgeGender)
rm(list=c('VlNonTSCAgeGender','VlTSCAgeGender'))
VlPtsAgeGender <- ldply(VlPtsAgeGender,quickdf)
VlAgeMat <- NormAge(VlPtsAgeGender,MeanAgeFirst,MeanAgeSecond)
##################################################################################################
# Feature Vectors for patients in validation set
VlTSClabel <- rep(1,NumVlPtTSC) # Label vector for TSC patients invalidation set
VlNonTSClabel <- rep(-1,NumVlPtNonTSC)  # Label vector for non-TSC patients invalidation set
Vllabel <- c(VlTSClabel,VlNonTSClabel)
Fname <- paste(VlFile,filenum,'.txt',sep="")
MkFtVec(VlAgeMat,VlPtsCodeDrug,Dict,Vllabel,Fname)
rm(list=c('VlAgeMat','VlPtsCodeDrug','VlPtsAgeGender','Vllabel'))
rm(list=c('Dict'))
cat("\n Processing patients for training\n")
TrTSCPtId <- TrVlTSCPtId
TrTSCAgeGender <- lapply(X=1:1:length(TrTSCPtId), function(X) TSCAgeGender[ which(TSCAgeGender$Id %in% TrTSCPtId[X]), ] )
TrTSCCodeDrug <- lapply(X=1:1:length(TrTSCPtId), function(X) TSCCodeDrug[ which(TSCCodeDrug$V1 %in% TrTSCPtId[X]), ] )
if (NumTrPtNonTSC > 0 & !ONE){
TrNonTSCAgeGender <- lapply(X=1:1:length(TrNonTSCPtId), function(X) NonTSCAgeGender[ which(NonTSCAgeGender$Id %in% TrNonTSCPtId[X]), ] )
TrNonTSCCodeDrug <- lapply(X=1:1:length(TrNonTSCPtId), function(X) NonTSCCodeDrug[ which(NonTSCCodeDrug$V1 %in% TrNonTSCPtId[X]), ] )
TrPtsAgeGender <- c(TrTSCAgeGender,TrNonTSCAgeGender)
rm(list=c('TrNonTSCAgeGender','TrTSCAgeGender'))
TrPtsCodeDrug <- c(TrTSCCodeDrug,TrNonTSCCodeDrug)
rm(list=c('TrNonTSCCodeDrug'))
}
if (ONE) {
TrPtsAgeGender <- TrTSCAgeGender
rm(list=c('TrTSCAgeGender'))
TrPtsCodeDrug <- TrTSCCodeDrug
rm(list=c('TrTSCCodeDrug'))
}
##################################################################################################
# Age normalisation for patients in training set
TrPtsAgeGender <- ldply(TrPtsAgeGender,quickdf)
MeanAgeFirst <- mean(TrPtsAgeGender[,2])
MeanAgeSecond <- mean(TrPtsAgeGender[,3])
TrAgeMat <- NormAge(TrPtsAgeGender,MeanAgeFirst,MeanAgeSecond)
##################################################################################################
# Drug & Code Dictionary
dictFile_ <- paste(dictFile,filenum,Ext,sep="")
Dict <- MkDictEnv(TrPtsCodeDrug,dictFile_)
##################################################################################################
# Feature Vectors for patients in training set
TrTSClabel <- rep(1,length(TrTSCPtId)) # Label vector for TSC patients
if (!ONE)
{
TrNonTSClabel <- rep(-1,NumTrPtNonTSC) # Label vector for non-TSC patients
Trlabel <- c(TrTSClabel,TrNonTSClabel)
}
if (ONE)
{
Trlabel <- TrTSClabel
}
Fname <- paste(TrFile,filenum,'.txt',sep="")
MkFtVec(TrAgeMat,TrPtsCodeDrug,Dict,Trlabel,Fname)
rm(list=c('TrAgeMat','TrPtsCodeDrug','Trlabel'))
TsTSCAgeGender <- lapply(X=1:1:length(TsTSCPtId), function(X) TSCAgeGender[ which(TSCAgeGender$Id %in% TsTSCPtId[X]), ] )
TsTSCCodeDrug <- lapply(X=1:1:length(TsTSCPtId), function(X) TSCCodeDrug[ which(TSCCodeDrug$V1 %in% TsTSCPtId[X]), ] )
##################################################################################################
# Age normqlisation for TSC patients in test set
TsTSCAgeMat <- ldply(TsTSCAgeGender,quickdf)
TsTSCAgeMat <- NormAge(TsTSCAgeMat,MeanAgeFirst,MeanAgeSecond)
##################################################################################################
# Feature Vectors for TSC patients in test set
TsTSClabel <- rep(1,NumTsPtTSC) # Label vector for TSC patients in test set
Fname <- paste(TsFilePos,filenum,'.txt',sep="")
MkFtVec(TsTSCAgeMat,TsTSCCodeDrug,Dict,TsTSClabel,Fname)
rm(list=c('TsTSCAgeMat','TsTSCCodeDrug','TsTSCAgeGender','TsTSClabel'))
#rm(list=c('TSCAgeGender','TSCCode','TSCDrug'))
write.table(TsTSCPtId,file=TSCTsIndexFile,quote=FALSE,col.names=FALSE,row.names=FALSE,append=TRUE)
cat("\n Processing non-TSC paients for evaluation (test) \n")
TsIndexFile <- paste(TsIndexFile,filenum,sep="")
PARALLEL <- FALSE   # Set PARALLEL to FALSE for swquential processing
if (PARALLEL) {
num_pros <- Sys.getenv('NUMBER_OF_PROCESSORS')
sfInit(parallel=TRUE, cpus=num_pros, type="SOCK",slaveOutfile = "C:\\work\\working materials\\TSC and QC project\\data/FV_2_update/2n/error.log")
sfLibrary(snowfall)
}
# Split non-TSC data and perfrom parallel processing
cat("\nSplit non-TSC data and perfrom parallel processing\n")
NumSplit <- 8
split <- round(NumTsPtNonTSC/NumSplit)
IdxAry <- array(list(NULL),NumSplit,split)
cat("\n the initial IdxAry length:", length(IdxAry), '\n')
cat('\n the split num=', NumSplit, ' and the length of each split is ', split, '\n')
sindex <- 1
findex <- split
for (j in 1:(NumSplit-1)) {
LstIdx <- sindex:findex
TSCLstIdx <- TsNonTSCPtId[LstIdx]
sindex <- findex + 1
findex <- findex + split
IdxAry[[j]] <- list(TSCLstIdx)
}
LstIdx <- sindex:NumTsPtNonTSC
TSCLstIdx <- TsNonTSCPtId[LstIdx]
IdxAry[[j+1]] <- list(TSCLstIdx)
cat("\nindex for split data complete\n")
cat('\n',length(IdxAry),'\n')
#sfExport("IdxAry","Dict","NonTSCAgeGender","NonTSCCodeDrug","MeanAgeFirst","MeanAgeSecond","TsFilePos","TsFileNeg","filenum","TsIndexFile","Ext","norm2")
#the loop has been modified by Jie
SVIdxAry <- sapply(IdxAry,paste,collapse="")
for(i in 1:NumSplit){
PrsTst(i, IdxAry, Dict, NonTSCAgeGender, NonTSCCodeDrug, MeanAgeFirst, MeanAgeSecond, TsFilePos, TsFileNeg, filenum, TsIndexFile, Ext, norm2)
}
}
Ext
rm(list=ls())
library(glmnet)
library(xlsx)
library(snowfall)
options(digits=7)
source('C:\\work\\working materials\\overfitting2\\code\\strata1.sampling.R')
#logistic regression and Ridge regression
path_output <- 'C:\\work\\working materials\\overfitting2\\model_output'
setwd(path_output)
#check correlation matrix
dataset_all <- c('data_forModel')
dataset <- 1
raw_data <- read.table(paste(dataset_all[dataset], '.csv', sep=''), sep=',', head=T)
names(raw_data)<- tolower(names(raw_data))
dim(raw_data)
na_check <- apply(apply(raw_data, 2, is.na), 2, sum)
response <- raw_data[, 'response']
sum(response)/length(response)
